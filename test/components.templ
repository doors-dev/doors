package test

import (
	"context"
	"fmt"
	"github.com/doors-dev/doors"
	"net/http"
)

templ report(value string) {
	@reportId(0, value)
}

templ reportId(id int, value string) {
	<div id={ fmt.Sprintf("report-%d", id) }>{ value }</div>
}

templ marker(id string) {
	<div id={ id }></div>
}

type page[P any] interface {
	h1() string
	content(doors.SourceBeam[P]) templ.Component
	head(doors.SourceBeam[P]) templ.Component
}

templ Document[P any](p page[P], b doors.SourceBeam[P]) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@doors.Include()
			<link
				rel="icon"
				type="image/png"
				{ doors.A(ctx, doors.ARawFileHref{
                Handler: func(w http.ResponseWriter, r *http.Request) {
                },
                })... }
			/>
			@p.head(b)
		</head>
		<body>
			<h1>{ p.h1() }</h1>
			@p.content(b)
		</body>
	</html>
}

func newReporter(size int) *reporter {
	reports := make([]*doors.Node, size)
	for i := range size {
		reports[i] = &doors.Node{}
	}
	return &reporter{
		reports: reports,
	}
}

type reporter struct {
	reports []*doors.Node
}

func (r *reporter) update(ctx context.Context, i int, content string) {
	r.reports[i].Update(ctx, reportId(i, content))
}

templ (r *reporter) Render() {
	for _, report := range r.reports {
		@report
	}
}

templ button(id string, handler func(context.Context) bool) {
	<button
		id={ id }
		{ doors.A(ctx, doors.AClick {
        On: func(ctx context.Context, _ doors.REvent[doors.PointerEvent]) bool {
            return handler(ctx)
        },

    }) ... }
	>{ id }</button>
}
