package attr

import (
	"context"
	"encoding/json"
	"github.com/doors-dev/doors"
	"github.com/doors-dev/doors/internal/test"
)

type pointerFragment struct {
	test.NoBeam
	r *test.Reporter
}

templ (f *pointerFragment) Render() {
	{{ f.r.Update(ctx, 0, "") }}
	@doors.F(f.r)
	@doors.APointerDown{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "DOWN")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="down"
	>PointerDown</div>
	@doors.APointerUp{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "UP")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="up"
	>PointerUp</div>
	@doors.APointerEnter{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "ENTER")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="enter"
	>PointerEnter</div>
	<div id="beforeLeave">beforeLeave</div>
	@doors.APointerLeave{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "LEAVE")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="leave"
	>PointerLeave</div>
	@doors.APointerMove{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "MOVE")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="move"
	>PointerMove</div>
	@doors.APointerOver{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "OVER")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="over"
	>Over</div>
	<div id="beforeOut">beforeOut</div>
	@doors.APointerOut{
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			f.r.Update(ctx, 0, "OUT")
			f.r.Update(ctx, 1, test.Float(r.Event().PageX))
			f.r.Update(ctx, 2, test.Float(r.Event().PageY))
			return false
		},
	}
	<div
		id="out"
	>Out</div>
}

type callFragment struct {
	data string
	test.NoBeam
	r *test.Reporter
}

templ (f *callFragment) Render() {
	@doors.F(f.r)
	<div id="target"></div>
	@doors.AHook[string, int]{
		Name: "myHook",
		On: func(ctx context.Context, r doors.RHook[string]) (int, bool) {
			f.r.Update(ctx, 0, r.Data())
			doors.Call(ctx, doors.CallConf{
				Name: "myCall",
				Arg:  len(r.Data()),
				Trigger: func(ctx context.Context, r doors.RCall) {
					var str string
					decoder := json.NewDecoder(r.Body())
					err := decoder.Decode(&str)
					if err != nil {
						f.r.Update(ctx, 1, err.Error())
						return
					}
					f.r.Update(ctx, 1, str)
				},
			})
			return len(r.Data()), true
		},
	}
	@doors.Script() {
		@doors.AData{
			Name:  "myData",
			Value: f.data,
		}
		<script>
        $d.on("myCall", (data) => {
            document.getElementById("target").innerHTML = `${data}`
            return "response"
        })
        await $d.hook("myHook", $d.data("myData"))
        </script>
	}
}

type hookFragment struct {
	data string
	test.NoBeam
	r *test.Reporter
}

func (d *hookFragment) attr() []doors.Attr {
	return []doors.Attr{doors.AHook[string, int]{
		Name: "myHook",
		On: func(ctx context.Context, r doors.RHook[string]) (int, bool) {
			d.r.Update(ctx, 0, r.Data())
			return len(r.Data()), true
		},
	}, doors.AData{
		Name:  "myData",
		Value: d.data,
	}}
}

templ (f *hookFragment) Render() {
	@doors.F(f.r)
	<div id="target"></div>
	@doors.Script() {
		@doors.Attributes(f.attr())
		<script>
            const a = await $d.hook("myHook", $d.data("myData"))
            document.getElementById("target").innerHTML = `${a}`
        </script>
	}
}

type dataFragment struct {
	data string
	test.NoBeam
}

templ (f *dataFragment) Render() {
	<div id="target"></div>

	@doors.Script() {
		@doors.AData{
			Name:  "myData",
			Value: f.data,
		}
		<script>
        document.getElementById("target").innerHTML = $d.data("myData")
        </script>
	}
}
