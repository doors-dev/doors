// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package attr

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"fmt"
	"github.com/doors-dev/doors"
	"github.com/doors-dev/doors/internal/test"
)

type keyFragment struct {
	r *test.Reporter
	test.NoBeam
}

func (f *keyFragment) Render() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = doors.AKeyDown{
			On: func(ctx context.Context, r doors.REvent[doors.KeyboardEvent]) bool {
				f.r.Update(ctx, 0, r.Event().Key)
				f.r.Update(ctx, 1, "down")
				return false
			},
		}.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = doors.AKeyUp{
			On: func(ctx context.Context, r doors.REvent[doors.KeyboardEvent]) bool {
				f.r.Update(ctx, 2, r.Event().Key)
				f.r.Update(ctx, 3, "up")
				if r.Event().ShiftKey {
					f.r.Update(ctx, 4, fmt.Sprint(r.Event().ShiftKey))
				}
				if r.Event().CtrlKey {
					f.r.Update(ctx, 5, fmt.Sprint(r.Event().CtrlKey))
				}
				if r.Event().AltKey {
					f.r.Update(ctx, 6, fmt.Sprint(r.Event().AltKey))
				}
				return false
			},
		}.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<input type=\"text\" id=\"input\" placeholder=\"\"><hr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		f.r.Update(ctx, 0, "")
		f.r.Update(ctx, 1, "")
		f.r.Update(ctx, 2, "")
		f.r.Update(ctx, 3, "")
		f.r.Update(ctx, 4, "")
		f.r.Update(ctx, 5, "")
		f.r.Update(ctx, 6, "")
		templ_7745c5c3_Err = f.r.Render().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
