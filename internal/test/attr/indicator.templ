package attr

import (
	"context"
	"github.com/doors-dev/doors"
	"github.com/doors-dev/doors/internal/test"
	"time"
)

type indicatorFragment struct {
	test.NoBeam
}

templ (f *indicatorFragment) Render() {
	@f.selectors()
	@f.restore()
	@f.queue()
}

// templ: extend to cover attributes and partial updates
templ (f *indicatorFragment) queue() {
	<div id="q-target" class="base-class" data-a="A0">base</div>
	@f.button("queue-1", []doors.Indicator{
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Name:     "data-a",
			Value:    "A1",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Class:    "class-1",
		},
		doors.ContentIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Content:  "first",
		},
	})
	@f.button("queue-2", []doors.Indicator{
		// Partial update: does NOT touch data-a, so when this applies
		// data-a should restore to original (A0).
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Name:     "data-b",
			Value:    "B2",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Class:    "class-2",
		},
		doors.ContentIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Content:  "second",
		},
	})
	@f.button("queue-3", []doors.Indicator{
		// Partial update: does NOT touch data-a, so when this applies
		// data-a should restore to original (A0).
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Name:     "data-b",
			Value:    "B2",
		},
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Name:     "data-a",
			Value:    "A3",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Class:    "class-2",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Class:    "class-3",
		},
		doors.ContentIndicator{
			Selector: doors.SelectorQuery("#q-target"),
			Content:  "second",
		},
	})
}


templ (f *indicatorFragment) restore() {
	<div id="indicator-1" class="class-1 class-3" data-attr1="val-1">content-1</div>
	@f.button("action-1", []doors.Indicator{
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Name:     "data-attr1",
			Value:    "val-other",
		},
		doors.AttrIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Name:     "data-attr2",
			Value:    "val-2",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Class:    "class-1",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Class:    "class-1",
		},
		doors.ClassRemoveIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Class:    "class-3",
		},
		doors.ClassIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Class:    "class-2",
		},
		doors.ContentIndicator{
			Selector: doors.SelectorQuery("#indicator-1"),
			Content:  "indication",
		},
	})
}

templ (f *indicatorFragment) selectors() {
	<div id="next" class="block"></div>
	<div id="parent" class="block">
		@f.button("indicate-parent", doors.IndicatorAttrQueryParent(".block", "data-check", "true"))
		@f.button("indicate-self", doors.IndicatorContent("indication"))
		@f.button("indicate-selector", doors.IndicatorAttrQuery("#next", "data-check", "true"))
	</div>
}

templ (f *indicatorFragment) button(id string, indicator []doors.Indicator) {
	<button id={ id } { doors.A(ctx, f.handler(indicator))... }>{ id }</button>
}

func (f *indicatorFragment) handler(indicator []doors.Indicator) doors.Attr {
	return doors.AClick{
		Indicator: indicator,
		On: func(ctx context.Context, r doors.REvent[doors.PointerEvent]) bool {
			<-time.After(500 * time.Millisecond)
			return false
		},
	}
}
